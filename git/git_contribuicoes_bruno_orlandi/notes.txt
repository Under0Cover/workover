ANOTAÇÕES SOBRE O CURSO DE GIT DO BRUNO ORLANDI
=============================================================================================
--- CURSO ---

-> SEM ABORDAGEM TÉCNICA
-> FOCO APRENDIZADO É NA PRÁTICA
-> SEM ENVOLVIMENTO DE CÓDIGO

=============================================================================================
--- CONTEÚDO ---

-> CONTROLE DE VERSÃO
-> COMANDOS BÁSICOS
-> RAMIFICAÇÕES
-> PUBLICANDO E COLABORANDO
-> EXERCÍCIOS
-> EXTRAS

=============================================================================================
--- GIT ---

-> SISTEMA DE CONTROLE DE VERSÃO DISTRIBUÍDO
-> CRIADO POR LINUS TORVALDS (05)

=============================================================================================
--- GERÊNCIA DE CONFIGURAÇÃO DE SOFTWARE ---

	DURANTE O DESENVOLVIMENTO DO SOFTWARE, SEMPRE APARECERÁ ALGUMAS PERGUNTAS QUANDO AS MUDANÇAS FORAM FEITAS. OS SOFTWARES IRÃO SOFRER VÁRIAS ALTERAÇÕES E SABER O QUE FOI MUDANDO, QUANDO FOI MUDADO, PORQUE FOI MUDADO, QUEM FEZ A MUDANÇA E SE ESSA MUDANÇA PODE SER REPRODUZIDA SÃO DÚVIAS E/OU INFORMAÇÕES MUITAS VEZES NECESSÁRIAS PARA A CONTINUAÇÃO DO DESENVOLVIMENTO DO SOFTWARE.

	EXISTEM 4 IMPORTANTES TÓPICOS SOBRE A GERÊNCIA DE CONFIGURAÇÃO DE SOFTWARE QUE MERECEM UMA ATENÇÃO ESPECIAL, SÃO ELES:
	-> IDENTIFICAÇÃO
	-> DOCUMENTAÇÃO
	-> CONTROLE
	-> AUDITORIA

	DURANTE O DESENVOLVIMENTO DE SOFTWARE, O ARTEFATO É PRODUZIDO. E A GERÊNCIA DE CONFIGURAÇÃO DE SOFTWARE DEVE SER APLICADA SOBRE O ARTEFATO. O ARTEFATO É UMA COMPISIÇÃO DESTES TRÊS PRINCIPAIS ITENS:
	-> CÓDIGO FONTE
	-> DOCUMENTAÇÃO DO SOFTWARE
	-> MANUAL DO USUÁRIO

=============================================================================================
--- CONTROLE DE VERSÃO ---

*** EXEMPLO DE PROBLEMA, COMO O DROPBOX ***

*** EXEMPLO DO CONTROLE DE VERSÃO: <VISUALIZE E IMAGEM "CONTROLE_VERSAO.PNG" ***

=============================================================================================
--- GIT E GITHUB ---

PARA NÃO HAVER MAIS CONFUSÃO ENTRE AS DUAS COISAS:
	-> GIT É O SISTEMA DE CONTROLE DE VERSÕES E PODEM ENVIAR/RECEBER ARQUIVOS DE VÁRIOS HUBS.
	-> GITHUB É UM HUB PARA ARMAZENAR OS ARQUIVOS ENVIADOS POR GIT.

	ALGUNS EXEMPLOS DE HUBS QUE SUPORTAM O GIT PARA ENVIO/RECEBIMENTO DE ARQUIVOS:
	-> GITHUB
	-> GITLAB
	-> BITBUCKET
	-> SOURCEFORGE

=============================================================================================
--- CHAVE SSH ---

	A CHAVE SSH DEVE SER CONFIGURADA COMO FORMA DE AUTENTICAÇÃO DIRETA ENTRE O GIT E O HUB ESCOLHIDO. HÁ INÚMERAS CONFIGURAÇÕES QUE PODEM SER FEITAS, INCLUINDO DATA PARA O FIM DA LIBERAÇÃO. CADA HUB TEM CONFIGURAÇÕES E OPÇÕES DIFERENTES, MAS COM UM TUTORIAL COMPLETO.

=============================================================================================
--- COMANDOS GIT ---
	-> GIT INIT
	-> GIT STATUS
	-> GIT ADD .
	-> GIT COMMIT
	-> GIT LOG
	DEPOIS DO RESPOSITÓRIO ABERTO NO GITHUB:
	-> GIT REMOTE ADD ORIGIN <https>
	-> GIT PUSH
	-> CONFIGURAR O README


=============================================================================================
--- CLONE ----

	-> GIT CLONE
	-> GIT PULL

=============================================================================================
--- CHECKOUT ---
	EM ALGUM DETERMINADO MOMENTO, SEU PROJETO JÁ TERÁ MUITOS COMMITS. E EM ALGUM MOMENTO VOCÊ VAI PRECISAR VOLTAR ATRÁS EM UM COMMIT ESPECÍFICO. PARA CONSEGUIR TRAZER QUALQUER COMMIT ESPECÍFICO BASTA UTILIZAR O COMANDO:
	-> GIT CHECKOUT <commit> <file>

	PARA PODER OBTER O CÓDIGO DO COMMIT A SER RECUPERADO, UTILIZE DO GIT LOG PARA VERIFICAR AS INFORMAÇÕES SOBRE O COMMIT. COM O CÓDIGO GERADO, UTILIZE NO EXEMPLO E O RETORNO SERÁ A ATUALIZAÇÃO (NO CASO, RETORNO) PARA OS ARQUIVOS COMO ESTAVAM NAQUELE COMMIT.

	AQUI DUAS SITUAÇÕES PODEM ACONTECER. A UTILIZAÇÃO DESTES CÓDIGO MAIS ANTIGOS EM UMA OUTRA VERSÃO. E COM ESSA IDEIA O GIT SUGERE A CRIAÇÃO DE UMA BRANCH. ESSA OUTRA OPÇÃO, NÓS VEREMOS DEPOIS. PARA AGORA, VAMOS UTILIZAR A OUTRA SITUAÇÃO. NÃO MODIFICAMOS NADA E QUEREMOS VOLTAR PARA A MAIS ATUAL. PARA VOLTAR, BASTA DIGITAR O COMANDO:
	-> GIT CHECKOUT MASTER

	E VOCÊ ESTARÁ DE VOLTA A VERSÃO MAIS ATUAL DO PROJETO.

*** OUTROS COMANDOS UTILIZANDO O GIT CHECKOUT ***

	-> GIT CHECKOUT --<caminho/arquivo>
	ESSE COMANDO IRÁ TE PERMITIR DESFAZER DE TODAS AS ALTERAÇÕES QUE NÃO ESTEJAM NO STAGE DESDE O ÚLTIMO COMMIT.

	-> GIT CHECKOUT HEAD -- <caminho/arquivo>
	ESSE COMANDO PERMITE DESFAZER AS ALTERAÇÕES DESDE O ÚLTIMO COMMIT, INCLUÍNDO O STAGE.

